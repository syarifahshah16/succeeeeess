#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
#
# generated by wxGlade 0.8.3 on Mon Dec  3 04:48:04 2018
#

import wx
import os
import sys  # We need sys so that we can pass argv to QApplication
from subprocess import Popen, PIPE
import dpkt
import datetime, time
import socket
from wx.lib.wordwrap import wordwrap
import wx.lib.agw.ultimatelistctrl as ULC





# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class mainNetAnalysis(wx.Frame):
      def __init__(self, *args, **kwds):
            # begin wxGlade: mainNetAnalysis.__init__
            kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
            wx.Frame.__init__(self, *args, **kwds)
            self.SetSize((1000, 873))
            
            # Menu Bar
            self.mainNetAnalysis_menubar = wx.MenuBar()
            wxglade_tmp_menu = wx.Menu()
            self.mainNetAnalysis_menubar.i_uploadpcap = wxglade_tmp_menu.Append(wx.ID_ANY, "Open Pcap", "")
            self.Bind(wx.EVT_MENU, self.on_menu_upload_PCAP, id=self.mainNetAnalysis_menubar.i_uploadpcap.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
            self.Bind(wx.EVT_MENU, self.on_menu_File_Exit, id=item.GetId())
            self.mainNetAnalysis_menubar.Append(wxglade_tmp_menu, "File")
            wxglade_tmp_menu = wx.Menu()
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Clear GUI", "")
            self.Bind(wx.EVT_MENU, self.on_tools_clear, id=item.GetId())
            item = wxglade_tmp_menu.Append(wx.ID_ANY, "Delete Data", "")
            self.Bind(wx.EVT_MENU, self.on_tools_del, id=item.GetId())
            self.mainNetAnalysis_menubar.Append(wxglade_tmp_menu, "Tools")
            self.SetMenuBar(self.mainNetAnalysis_menubar)
            # Menu Bar end
            self.mainNetAnalysis_statusbar = self.CreateStatusBar(1, wx.STB_DEFAULT_STYLE | wx.STB_ELLIPSIZE_MIDDLE | wx.STB_ELLIPSIZE_START)
            self.packet_details_copy = wx.Notebook(self, wx.ID_ANY)
            self.packet_details_copy_pane_2 = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.pcaplist = wx.ListCtrl(self.packet_details_copy_pane_2, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_SINGLE_SEL | wx.LC_VRULES)
            self.packetsList = wx.TextCtrl(self.packet_details_copy_pane_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
            self.packet_details_copy_Protocol = wx.Panel(self.packet_details_copy, wx.ID_ANY)
            self.dnslist = wx.ListCtrl(self.packet_details_copy_Protocol, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_SINGLE_SEL | wx.LC_VRULES)

            self.__set_properties()
            self.__do_layout()

            
            # end wxGlade

      def __set_properties(self):
            # begin wxGlade: mainNetAnalysis.__set_properties
            self.SetTitle("Network Analysis")
            self.SetBackgroundColour(wx.Colour(232, 232, 232))
            self.mainNetAnalysis_statusbar.SetStatusWidths([-1])

            # statusbar fields
            mainNetAnalysis_statusbar_fields = ["Network Analysis"]
            for i in range(len(mainNetAnalysis_statusbar_fields)):
                  self.mainNetAnalysis_statusbar.SetStatusText(mainNetAnalysis_statusbar_fields[i], i)
            self.pcaplist.SetMinSize((1000, 370))
            self.packetsList.SetMinSize((1000, 370))
            self.packetsList.SetBackgroundColour(wx.Colour(211, 211, 211))
            self.pcaplist.AppendColumn("Packet", format=wx.LIST_FORMAT_LEFT, width=70)
            self.pcaplist.AppendColumn("Time", format=wx.LIST_FORMAT_LEFT, width=200)
            self.pcaplist.AppendColumn("Source", format=wx.LIST_FORMAT_LEFT, width=193)
            self.pcaplist.AppendColumn("Destination", format=wx.LIST_FORMAT_LEFT, width=193)
            self.pcaplist.AppendColumn("HTTP Request", format=wx.LIST_FORMAT_LEFT, width=320)
            self.dnslist.AppendColumn("DNS", format=wx.LIST_FORMAT_LEFT, width=185)
            self.dnslist.AppendColumn("IP Response", format=wx.LIST_FORMAT_LEFT, width=193)
            self.dnslist.AppendColumn("Protocol", format=wx.LIST_FORMAT_LEFT, width=193)

            # end wxGlade

      def __do_layout(self):
            # begin wxGlade: mainNetAnalysis.__do_layout
            sizer_1 = wx.BoxSizer(wx.VERTICAL)
            sizer_4 = wx.BoxSizer(wx.VERTICAL)
            sizer_5 = wx.BoxSizer(wx.VERTICAL)
            sizer_4.Add(self.pcaplist, 0, wx.BOTTOM, 0)
            sizer_4.Add(self.packetsList, 0, wx.TOP, 27)
            self.packet_details_copy_pane_2.SetSizer(sizer_4)
            sizer_5.Add(self.dnslist, 1, wx.EXPAND, 0)
            self.packet_details_copy_Protocol.SetSizer(sizer_5)
            self.packet_details_copy.AddPage(self.packet_details_copy_pane_2, "Sessions")
            self.packet_details_copy.AddPage(self.packet_details_copy_Protocol, "DNS")
            sizer_1.Add(self.packet_details_copy, 1, wx.EXPAND, 0)
            self.SetSizer(sizer_1)
            self.Layout()
            self.Centre()
            # end wxGlade

      def addPCAPDetails(self, row):
        self.pcaplist.Append(row)


      def addDNSDetails(self, row2):
        self.dnslist.Append(row2)


      def inet_to_str(inet):
        """Convert inet object to a string

        Args:
            inet (inet struct): inet network address
        Returns:
            str: Printable/readable IP address"""
    # First try ipv4 and then ipv6
        try:
            return socket.inet_ntop(socket.AF_INET, inet)
        except ValueError:
            return socket.inet_ntop(socket.AF_INET6, inet)


      def on_menu_upload_PCAP(self, event):  # wxGlade: MyFrame.<event_handler>
            openFileDialog = wx.FileDialog(self, "Open", "", "","*.pcap",     #creates a filedialog that only allow user to select .pcap files 
                                        wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)

            if openFileDialog.ShowModal() == wx.ID_OK:
                  evidencePath = openFileDialog.GetPath()                         #get path of selected pcap file
                  filename = os.path.basename(evidencePath)
                  cmd2 = ['tshark', '-T', 'fields', '-e', 'ip.src', '-S', '/n', '-r', filename]
                  process = Popen(cmd2, stdout=PIPE, stderr=PIPE)
                  stdout, stderr = process.communicate()
                  row = ["", stdout]
                  mainNetAnalysis.addPCAPDetails(self, row)




                  #tcpdump in the bottom half of sessions (data dump with hex)
                  cmd = ['sudo', 'tcpdump', '-qns', '0', '-x', '-r', filename]
                  process = Popen(cmd, stdout=PIPE, stderr=PIPE)
                  stdout, stderr = process.communicate()
                  self.packetsList.SetValue(stdout)



                  print("PCAP Uploaded")

            else: 
                  print("Error Occurred!")

      def on_menu_File_Exit(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            self.Destroy()

      def on_tools_clear(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'on_tools_clear' not implemented!")
            event.Skip()

      def on_tools_del(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'on_tools_del' not implemented!")
            event.Skip()


      def itemSelectionChanged(self, event):  # wxGlade: mainNetAnalysis.<event_handler>
            print("Event handler 'itemSelectionChanged' not implemented!")
            event.Skip()






# end of class mainNetAnalysis

class MyApp(wx.App):
      def OnInit(self):
            self.mainNetAnalysis = mainNetAnalysis(None, wx.ID_ANY, "")
            self.SetTopWindow(self.mainNetAnalysis)
            self.mainNetAnalysis.Show()
            return True

# end of class MyApp

if __name__ == "__main__":
      app = MyApp(0)
      app.MainLoop()


