FOR MAIN.PY
    
    def onAddEvidence(self, event):
        try:
            caseDetails                                                     
        except NameError:                                                   #if caseDetails not defined
            print("Case not opened")                                        
        else:                                                               #if caseDetails is defined
            openFileDialog = wx.FileDialog(self, "Open", "", "","*.pcap",     #creates a filedialog that only allow user to select .dd files 
                                        wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
    
            openFileDialog.ShowModal()                         
            global caseDir, caseDbPath                                   
            evidencePath = openFileDialog.GetPath()                         #get path of selected dd file
            #fileName = os.path.basename(evidencePath)
            
            #to find the file tab and see if it's open
            pageCount = self.auiNotebook.GetPageCount()
            found = False
            #page count is order of the opened tab
            print("Page count: ", pageCount)

            #must initialize the page count on top so i can use here to match the text
            for i in range (0, pageCount): 
                text = self.auiNotebook.GetPageText(i)
                print("Page ", i, ": ", text, ";")
                if text == "File":
                    #if the window has the page opened on top and is true, then break the loop and continue
                    window = self.auiNotebook.GetPage(i)
                    found = True
                    break 

            if False == found:
                print("File tab not open!")
                return 

            # to get file path from the evidencePath (MUST CHANGE)
            print("File path: ", evidencePath)
            
            # filename and extension (MUST CHANGE)
            fileName, fileExt = os.path.splitext(os.path.basename(evidencePath))
            print("File name: ", fileName)
            print("File extension: ", fileExt)
            
            # size (MUST CHANGE)
            fileSize =  (os.stat(evidencePath)).st_size
            print("File size: ", fileSize)
            
            #rb is for opening non-text files
            f = open(evidencePath, 'rb')
            pcap = dpkt.pcap.Reader(f)

            identifier = 0
            for ts, buf in pcap:
                identifier = identifier + 1
                #make a space between each frame no
                print("\n")
                #for frame no, not what i needed but i can't do frame (RE-CHECK)
                print("Identifier: ", identifier)

                #initialize eth to use eth.type
                eth = dpkt.ethernet.Ethernet(buf)
                
                #if eth.type!=dpkt.ethernet.ETH_TYPE_IP:
                #to consider only IP packets idk why must find!!!
                if eth.type == dpkt.ethernet.ETH_TYPE_IP:
                    #to contain your IP address in binary
                    ip_hdr = eth.data
                    ip     = eth.ip
                    tcp    = ip.data
                    
                    #frame number for now it's just a sequential number
                    frameNumber  = identifier
                    
                    #source host
                    #must understand plox
                    src_ip_addr_bin = ip_hdr.src
                    src_ip_addr_str = socket.inet_ntoa(src_ip_addr_bin)
                    print("Source IP Address: ", src_ip_addr_str)
                    
                    #source port
                    #only do tcp bc network miner shows tcp
                    if ip_hdr.p == dpkt.ip.IP_PROTO_TCP:
                        src_port = tcp.sport
                        print("Source Port: ", src_port)
                    else:
                        #find out how to exclude non-tcp lines!!!!
                        print("Protocol is not TCP")

                    #destination host
                    dst_ip_addr_bin = ip_hdr.dst
                    dst_ip_addr_str = socket.inet_ntoa(dst_ip_addr_bin)
                    print("Destination IP Address: ", dst_ip_addr_str)
                    
                    #destination port
                    if ip_hdr.p == dpkt.ip.IP_PROTO_TCP:
                        dst_port = tcp.dport
                        print("Destination Port: ", dst_port)
                    else:
                        #not tcp but why still appear??
                        print("Protocol is not TCP")
                        
                    #to put the sequence in list
                    row = [frameNumber, evidencePath, src_ip_addr_str, src_port, dst_ip_addr_str, dst_port, fileName, fileExt, fileSize]
                    FileTab.TabPanel.addFileDetails(window, row)    
                    
                else:
                    print("Values not extracted successfully.")

            openFileDialog.Destroy() 
            
            
FOR FILETAB.PY

    def addFileDetails(self, row):
        self.list_ctrl_1.Append(row)



